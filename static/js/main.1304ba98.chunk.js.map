{"version":3,"sources":["components/Layout/index.js","components/TodoListItem/styled.js","components/Icon/Icon.js","components/EditTextValue/EditTextValue.js","components/TodoListItem/TodoListItem.js","utilities/index.js","components/ShowDeleteConfirm/index.js","defaultProps/index.js","redux/ducks/todos.js","components/TodoList/styled.js","shapes/index.js","components/TodoList/TodoList.js","components/TodoListContainer/TodoListContainer.js","components/App/App.js","localStorage.js","redux/configureStore.js","index.js"],"names":["Header","Layout","Footer","Content","AppLayout","children","style","minHeight","color","textAlign","padding","maxWidth","margin","backgroundColor","Row","styled","div","TodoSelectionIconWrapper","span","TodoTitleWrapper","ErrorMessage","TodoIconWrapper","typesMap","faCircleSolid","faCircleRegular","faPencilAlt","faTrashAlt","Icon","type","rest","icon","EditTextValue","forwardRef","ref","value","placeholder","onBlur","noop","onSubmit","onChange","useState","state","setState","e","preventDefault","name","target","TodoListItem","title","selected","editing","errorMessage","onBtnSelectionClick","onBtnEditClick","onBtnDeleteClick","onInputTextBlur","onInputTextOnChange","onInputTextSubmit","textInputRef","useRef","useEffect","current","focus","onClick","findItemWithKeyValue","arr","key","find","propEq","confirm","Modal","showDeleteConfirm","content","onConfirmDelete","okText","okType","cancelText","onOk","defaultProps","todos","initialState","createNewTodo","id","v4","toggleTodoKeys","todoId","keys","payload","setTodoKeys","entries","selectTodos","path","ListItem","List","Item","todoPropType","PropTypes","shape","string","isRequired","bool","customizeRenderEmpty","arrayOf","description","TodoList","dataSource","renderItem","renderEmpty","bordered","item","mapDispatchToProps","toggleTodoSelected","toggleTodoEditing","addNewTodo","deleteTodo","setTodoTitle","setTodoErrorMessage","connect","isEditingTodo","findTodoWithSameTitle","str","todo","toLowerCase","length","todoWithSameTitle","float","marginTop","size","App","loadStateFromLocalStorage","serializedState","localStorage","getItem","JSON","parse","err","console","log","saveStateToLocalStorage","stringify","setItem","epicMiddleware","createEpicMiddleware","rootEpic","combineEpics","rootReducer","combineReducers","action","newTodo","filter","map","toggledKeysObj","reduce","acc","curr","store","persistedState","createStore","composeWithDevTools","applyMiddleware","run","subscribe","throttle","getState","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1304ba98.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst {Header, Footer, Content} = Layout;\r\n\r\nconst AppLayout = ({children}) => (\r\n    <Layout\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Header>\r\n            <h1\r\n                style={{\r\n                    color: 'white',\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Todo List App\r\n            </h1>\r\n        </Header>\r\n        <Content\r\n            style={{\r\n                padding: '3rem 2rem',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    maxWidth: 608,\r\n                    margin: '0 auto',\r\n                    backgroundColor: 'white',\r\n                }}\r\n            >\r\n                {children}\r\n            </div>\r\n        </Content>\r\n        <Footer\r\n            style={{\r\n                textAlign: 'center'\r\n            }}\r\n        >\r\n            Made with ‚ù§ by Thomas Chappel\r\n        </Footer>\r\n    </Layout>\r\n);\r\n\r\nexport default AppLayout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Row = styled.div`\r\n    width: 100%;\r\n    height: 100%\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: start;\r\n    align-items: center;\r\n`;\r\n\r\nexport const TodoSelectionIconWrapper = styled.span`\r\n    margin-right: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const TodoTitleWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-right: auto;\r\n`;\r\n\r\nexport const ErrorMessage = styled.span`\r\n    color: red;\r\n    margin-left: 1rem;\r\n`;\r\n\r\nexport const TodoIconWrapper = styled.span`\r\n    margin-left: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle as faCircleRegular } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCircle as faCircleSolid } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst typesMap = {\r\n    'circle-filled': faCircleSolid,\r\n    'circle-outlined': faCircleRegular,\r\n    'edit': faPencilAlt,\r\n    'delete': faTrashAlt,\r\n};\r\n\r\nconst Icon = ({type, ...rest}) => {\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={typesMap[type]}\r\n            {...rest}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState, forwardRef } from 'react';\r\nimport { noop } from 'ramda-extension';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**API**/\r\n// value: string\r\n// placeholder: string\r\n// onBlur: function(value)\r\n// onSubmit: function(value)\r\n// onChange: function(value)\r\n\r\n\r\nconst EditTextValue = forwardRef(({\r\n                                      value = '',\r\n                                      placeholder = '',\r\n                                      onBlur = noop,\r\n                                      onSubmit = noop,\r\n                                      onChange = noop,\r\n                                  }, ref) => {\r\n\r\n    const [state, setState] = useState(value);\r\n\r\n    return (\r\n        <form\r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                onSubmit(state);\r\n            }}\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                name=\"edit-text\"\r\n                placeholder={placeholder}\r\n                ref={ref}\r\n                value={state}\r\n                onChange={(e) => {\r\n                    setState(e.target.value);\r\n                    onChange(state);\r\n                }}\r\n                onBlur={() => onBlur(state)}\r\n            />\r\n        </form>\r\n    );\r\n});\r\n\r\nEditTextValue.propTypes = {\r\n    value: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    onBlur: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default EditTextValue;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, TodoTitleWrapper, TodoSelectionIconWrapper, TodoIconWrapper, ErrorMessage } from './styled';\r\nimport Icon from '../Icon';\r\nimport EditTextValue from '../EditTextValue';\r\nimport { noop } from 'ramda-extension';\r\n\r\n/**API**/\r\n//  title: string\r\n//  selected: bool\r\n//  editing: bool\r\n//  errorMessage: string\r\n//  onBtnSelectionClick: function()\r\n//  onBtnEditClick: function()\r\n//  onBtnDeleteClick: function()\r\n//  onInputTextBlur: function(value)\r\n//  onInputTextOnChange: function(value)\r\n//  onInputTextSubmit: function(value)\r\n\r\nconst TodoListItem = ({\r\n                          title = '',\r\n                          selected = false,\r\n                          editing = false,\r\n                          errorMessage = '',\r\n                          onBtnSelectionClick = noop,\r\n                          onBtnEditClick = noop,\r\n                          onBtnDeleteClick = noop,\r\n                          onInputTextBlur = noop,\r\n                          onInputTextOnChange = noop,\r\n                          onInputTextSubmit = noop,\r\n                      }) => {\r\n\r\n    const textInputRef = useRef(null);\r\n\r\n    const onBlur = value => {\r\n        onInputTextBlur(value);\r\n        if (editing) {\r\n            textInputRef.current.focus();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (editing) {\r\n            textInputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    return (\r\n        <Row>\r\n            <TodoSelectionIconWrapper>\r\n                <Icon\r\n                    type={selected ? \"circle-filled\" : \"circle-outlined\"}\r\n                    onClick={onBtnSelectionClick}\r\n                />\r\n            </TodoSelectionIconWrapper>\r\n            <TodoTitleWrapper>\r\n                {\r\n                    editing\r\n                        ? (\r\n                            <EditTextValue\r\n                                value={title}\r\n                                placeholder=\"Enter new todo title\"\r\n                                onBlur={onBlur}\r\n                                onSubmit={onInputTextSubmit}\r\n                                ref={textInputRef}\r\n                                onChange={onInputTextOnChange}\r\n                            />\r\n                        )\r\n                        : title\r\n                }\r\n                {\r\n                    errorMessage && (\r\n                        <ErrorMessage>\r\n                            {errorMessage}\r\n                        </ErrorMessage>\r\n                    )\r\n                }\r\n            </TodoTitleWrapper>\r\n            {\r\n                editing\r\n                    ? null\r\n                    : (\r\n                        <>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"edit\"\r\n                                    onClick={onBtnEditClick}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"delete\"\r\n                                    onClick={onBtnDeleteClick}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                        </>\r\n                    )\r\n            }\r\n        </Row>\r\n    );\r\n};\r\n\r\nTodoListItem.propTypes = {\r\n    title: PropTypes.string,\r\n    selected: PropTypes.bool,\r\n    editing: PropTypes.bool,\r\n    errorMessage: PropTypes.string,\r\n    onBtnSelectionClick: PropTypes.func,\r\n    onBtnEditClick: PropTypes.func,\r\n    onBtnDeleteClick: PropTypes.func,\r\n    onInputTextBlur: PropTypes.func,\r\n    onInputTextOnChange: PropTypes.func,\r\n    onInputTextSubmit: PropTypes.func\r\n};\r\n\r\nexport default TodoListItem;\r\n","import { find, propEq } from 'ramda';\r\n\r\nexport const findItemWithKeyValue = (arr, key, value) => find(propEq(key, value))(arr); // returns object or undefined\r\n","import { Modal } from 'antd';\r\nimport { noop } from 'ramda-extension';\r\n\r\nconst {confirm} = Modal;\r\n\r\n/*\r\nThis Modal component comes from antd library\r\nThe API requires to pass this function to the onClick attribute of a button\r\nI modified it a bit to make it reusable\r\nhttps://ant.design/components/modal/#header\r\n*/\r\n\r\nconst showDeleteConfirm = ({\r\n                               title = '',\r\n                               content = '',\r\n                               onConfirmDelete = noop\r\n                           }) => {\r\n    confirm({\r\n        title: title,\r\n        content: content,\r\n        okText: 'Yes',\r\n        okType: 'danger',\r\n        cancelText: 'No',\r\n        onOk() {\r\n            onConfirmDelete();\r\n        }\r\n    });\r\n};\r\n\r\nexport default showDeleteConfirm;\r\n","// this file containes reusable default values of components props\r\n\r\nexport const defaultProps = {\r\n    todos: []\r\n};\r\n","import { path } from 'ramda';\r\nimport { v4 } from 'node-uuid';\r\nimport { defaultProps } from '../../defaultProps';\r\n\r\nconst initialState = defaultProps.todos;\r\n\r\nconst createNewTodo = () => ({\r\n    id: v4(),\r\n    title: '',\r\n    selected: false,\r\n    editing: true,\r\n    errorMessage: '',\r\n});\r\n\r\n// action types\r\nconst ADD_NEW_TODO = 'ADD_NEW_TODO';\r\nconst DELETE_TODO = 'DELETE_TODO';\r\nconst TOGGLE_TODO_KEYS = 'TOGGLE_TODO_KEYS';\r\nconst SET_TODO_KEYS = 'SET_TODO_KEYS';\r\n\r\n/** ACTION CREATORS **/\r\nexport const addNewTodo = () => ({\r\n    type: ADD_NEW_TODO\r\n});\r\n\r\nexport const deleteTodo = todoId => ({\r\n    type: DELETE_TODO,\r\n    payload: todoId\r\n});\r\n\r\n// keys is an array of keys to toggle\r\nexport const toggleTodoKeys = (todoId, keys = []) => ({\r\n    type: TOGGLE_TODO_KEYS,\r\n    payload: {\r\n        keys,\r\n        todoId\r\n    }\r\n});\r\n\r\nexport const toggleTodoSelected = todoId => toggleTodoKeys(todoId, ['selected']);\r\nexport const toggleTodoEditing = todoId => toggleTodoKeys(todoId, ['editing']);\r\n\r\n// entries is an object that contains keys and values\r\nexport const setTodoKeys = (todoId, entries = {}) => ({\r\n    type: SET_TODO_KEYS,\r\n    payload: {\r\n        entries,\r\n        todoId\r\n    }\r\n});\r\n\r\n// error can be a string or nil\r\nexport const setTodoTitle = (todoId, title) => setTodoKeys(todoId, {title});\r\nexport const setTodoErrorMessage = (todoId, errorMessage) => setTodoKeys(todoId, {errorMessage});\r\n\r\n/** SELECTORS **/\r\nexport const selectTodos = path(['todos']);\r\n\r\n/** REDUCER **/\r\nexport default (state = initialState, action) => {\r\n    if (action.type === ADD_NEW_TODO) {\r\n        const newTodo = createNewTodo();\r\n        return [\r\n            ...state,\r\n            {...newTodo}\r\n        ];\r\n    }\r\n\r\n    if (action.type === DELETE_TODO) {\r\n        return state.filter(todo => todo.id !== action.payload);\r\n    }\r\n\r\n    if (action.type === TOGGLE_TODO_KEYS) {\r\n        const {keys = [], todoId} = action.payload;\r\n        return state.map(todo => {\r\n            if (todo.id === todoId) {\r\n                const toggledKeysObj = keys.reduce((acc, curr) => {\r\n                    acc[curr] = !todo[curr];\r\n                    return acc;\r\n                }, {});\r\n                return {...todo, ...toggledKeysObj};\r\n            } else {\r\n                return todo;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (action.type === SET_TODO_KEYS) {\r\n        const {entries = {}, todoId} = action.payload;\r\n        return state.map(todo => todo.id === todoId\r\n            ? {...todo, ...entries}\r\n            : todo\r\n        );\r\n    }\r\n\r\n    return state;\r\n};\r\n","import styled from 'styled-components';\r\nimport { List } from 'antd';\r\n\r\nexport const ListItem = styled(List.Item)`\r\n    &:hover {\r\n        background-color: #F7F9F9\r\n    }\r\n`;\r\n","// This files contains reusable propTypes\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const todoPropType = PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string,\r\n    selected: PropTypes.bool.isRequired,\r\n    editing: PropTypes.bool.isRequired,\r\n    errorMessage: PropTypes.string,\r\n});\r\n\r\nexport const todosPropType = PropTypes.arrayOf(todoPropType);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ConfigProvider, Empty, List } from 'antd';\r\nimport { ListItem } from './styled';\r\nimport { todosPropType } from '../../shapes';\r\nimport { defaultProps } from '../../defaultProps';\r\nimport { noop } from 'ramda-extension';\r\n\r\n/**API**/\r\n// This component is just ANTD List with some configured styled for use as TodoList\r\n// I tried to keep same API as regards dataSource and render prop\r\n// https://ant.design/components/list/\r\n\r\nconst customizeRenderEmpty = () => (\r\n    <Empty\r\n        description={\r\n            <span>\r\n                There are currently no todos. <br />\r\n                Click button \"New Item\" to add new todos.\r\n            </span>\r\n        }\r\n    />\r\n);\r\n\r\n\r\nconst TodoList = ({dataSource = defaultProps.todos, renderItem = noop}) => {\r\n    return (\r\n        <ConfigProvider\r\n            renderEmpty={customizeRenderEmpty}\r\n        >\r\n            <List\r\n                bordered\r\n                dataSource={dataSource}\r\n                renderItem={(item) => (\r\n                    <ListItem>\r\n                        {renderItem(item)}\r\n                    </ListItem>\r\n                )}\r\n            />\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nTodoList.propTypes = {\r\n    dataSource: todosPropType,\r\n    renderItem: PropTypes.func\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Icon } from 'antd';\r\nimport TodoListItem from '../TodoListItem';\r\nimport { findItemWithKeyValue } from '../../utilities';\r\nimport showDeleteConfirm from '../ShowDeleteConfirm';\r\nimport { defaultProps } from '../../defaultProps';\r\nimport {\r\n    addNewTodo,\r\n    deleteTodo,\r\n    selectTodos, setTodoErrorMessage,\r\n    setTodoTitle,\r\n    toggleTodoEditing,\r\n    toggleTodoSelected\r\n} from '../../redux/ducks/todos';\r\nimport TodoList from '../TodoList';\r\n\r\nconst TodoListContainer = ({\r\n                               todos = defaultProps.todos,\r\n                               addNewTodo,\r\n                               toggleTodoSelected,\r\n                               toggleTodoEditing,\r\n                               deleteTodo,\r\n                               setTodoTitle,\r\n                               setTodoErrorMessage\r\n                           }) => {\r\n\r\n    const isEditingTodo = !!findItemWithKeyValue(todos, 'editing', true);\r\n\r\n    const onBtnNewItemClick = () => {\r\n        if (!isEditingTodo) {\r\n            addNewTodo();\r\n        }\r\n    };\r\n\r\n    const findTodoWithSameTitle = str => {\r\n        return todos.find(todo => todo.title.toLowerCase() === str.toLowerCase());\r\n    };\r\n\r\n    const onInputTextBlur = todoId => () => {\r\n        const todo = findItemWithKeyValue(todos, 'id', todoId);\r\n        if (todo.title) {\r\n            setTodoErrorMessage(todo.id, '');\r\n            toggleTodoEditing(todo.id);\r\n        } else {\r\n            setTodoErrorMessage(todo.id, 'Please enter new todo title');\r\n        }\r\n    };\r\n\r\n    const onBtnEditClick = todoId => {\r\n        if (!isEditingTodo) {\r\n            toggleTodoEditing(todoId);\r\n        }\r\n    };\r\n\r\n    const onInputTextOnChange = todoId => () => {\r\n        setTodoErrorMessage(todoId, '');\r\n    };\r\n\r\n    const onInputTextSubmit = todoId => (value = '') => {\r\n\r\n        if (value.length === 0) {\r\n            setTodoErrorMessage(todoId, 'Cannot submit an empty value!');\r\n        } else {\r\n            const todoWithSameTitle = findTodoWithSameTitle(value);\r\n            if (todoWithSameTitle && todoWithSameTitle.id !== todoId) {\r\n                setTodoErrorMessage(todoId, 'This Todo already exists!');\r\n            } else {\r\n                setTodoTitle(todoId, value);\r\n                setTodoErrorMessage(todoId, '');\r\n                toggleTodoEditing(todoId);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TodoList\r\n                dataSource={todos}\r\n                renderItem={todo => (\r\n                    <TodoListItem\r\n                        title={todo.title}\r\n                        selected={todo.selected}\r\n                        editing={todo.editing}\r\n                        errorMessage={todo.errorMessage}\r\n                        onBtnSelectionClick={() => toggleTodoSelected(todo.id)}\r\n                        onBtnEditClick={() => onBtnEditClick(todo.id)}\r\n                        onBtnDeleteClick={() => showDeleteConfirm({\r\n                            title: 'Are you sure to delete this todo?',\r\n                            content: 'Click Yes to continue',\r\n                            onConfirmDelete: () => deleteTodo(todo.id)\r\n                        })}\r\n                        onInputTextBlur={onInputTextBlur(todo.id)}\r\n                        onInputTextOnChange={onInputTextOnChange(todo.id)}\r\n                        onInputTextSubmit={onInputTextSubmit(todo.id)}\r\n                    />\r\n                )}\r\n            />\r\n            <Button\r\n                style={{\r\n                    float: 'right',\r\n                    marginTop: '1rem',\r\n                }}\r\n                type=\"primary\"\r\n                size=\"large\"\r\n                onClick={onBtnNewItemClick}\r\n            >\r\n                New Item\r\n                <Icon type=\"plus\" />\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: selectTodos(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    toggleTodoSelected,\r\n    toggleTodoEditing,\r\n    addNewTodo,\r\n    deleteTodo,\r\n    setTodoTitle,\r\n    setTodoErrorMessage,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListContainer);\r\n","import React from 'react';\r\nimport Layout from '../Layout';\r\nimport TodoListContainer from '../TodoListContainer';\r\n\r\nconst App = () => (\r\n    <Layout>\r\n        <TodoListContainer />\r\n    </Layout>\r\n);\r\n\r\nexport default App;\r\n","// credit to Dan Abramov\r\n// https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\r\n\r\nexport const loadStateFromLocalStorage = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        console.log(err);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveStateToLocalStorage = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\nimport todosReducer from './ducks/todos';\r\nimport throttle from 'lodash.throttle';\r\nimport { loadStateFromLocalStorage, saveStateToLocalStorage } from '../localStorage';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootEpic = combineEpics(\r\n    // Epics go here\r\n);\r\n\r\nconst rootReducer = combineReducers({\r\n    // State properties reducers go here,\r\n    todos: todosReducer,\r\n});\r\n\r\nexport default function configureStore() {\r\n\r\n    const persistedState = loadStateFromLocalStorage();\r\n\r\n    const store = createStore(rootReducer,\r\n        persistedState,\r\n        composeWithDevTools(\r\n            applyMiddleware(epicMiddleware),\r\n            // other store enhancers if any\r\n        )\r\n    );\r\n\r\n    epicMiddleware.run(rootEpic);\r\n\r\n    store.subscribe(throttle(() => {\r\n        saveStateToLocalStorage({\r\n            todos: store.getState().todos\r\n        });\r\n    }, 1000));\r\n\r\n    return store;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './components';\r\nimport 'antd/dist/antd.css';\r\nimport configureStore from './redux/configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}