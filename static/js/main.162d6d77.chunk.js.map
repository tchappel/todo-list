{"version":3,"sources":["components/Layout/index.js","components/TodoListItem/styled.js","components/Icon/Icon.js","components/EditTextValue/EditTextValue.js","components/TodoListItem/TodoListItem.js","components/TodoList/styled.js","components/TodoList/TodoList.js","components/ShowDeleteConfirm/index.js","redux/ducks/todos.js","shapes/index.js","defaultProps/index.js","components/App/App.js","redux/configureStore.js","index.js"],"names":["Header","Layout","Footer","Content","AppLayout","children","style","minHeight","color","textAlign","padding","maxWidth","margin","backgroundColor","Row","styled","div","TodoSelectionIconWrapper","span","TodoTitleWrapper","ErrorMessage","TodoIconWrapper","typesMap","faCircleSolid","faCircleRegular","faPencilAlt","faTrashAlt","Icon","type","rest","icon","EditTextValue","forwardRef","ref","originalValue","placeholder","onBlur","onSubmit","onChange","useState","value","setValue","e","preventDefault","name","target","TodoListItem","todo","onBtnSelectionClick","onBtnEditClick","onBtnDeleteClick","onInputTextBlur","onInputTextOnChange","onInputTextSubmit","title","selected","id","editing","errorMessage","onClick","ListItem","List","Item","TodoList","todos","bordered","dataSource","renderItem","confirm","Modal","showDeleteConfirm","deleteTodoFunc","todoId","content","okText","okType","cancelText","onOk","initialState","nextId","createNewTodo","toggleTodoKeys","keys","payload","setTodoKeys","entries","selectTodos","path","todoPropType","PropTypes","shape","string","isRequired","bool","defaultProps","arrayOf","mapDispatchToProps","toggleTodoSelected","toggleTodoEditing","addNewTodo","deleteTodo","setTodoTitle","setTodoErrorMessage","connect","state","textInputRef","useRef","todoBeingEdited","find","findTodoWithSameTitle","str","toLowerCase","useEffect","current","focus","submittedValue","length","todoWithSameTitle","float","marginTop","size","epicMiddleware","createEpicMiddleware","rootEpic","combineEpics","rootReducer","combineReducers","action","newTodo","filter","map","toggledKeysObj","reduce","acc","curr","store","createStore","composeWithDevTools","applyMiddleware","run","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.162d6d77.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst {Header, Footer, Content} = Layout;\r\n\r\nconst AppLayout = ({children}) => (\r\n    <Layout\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Header>\r\n            <h1\r\n                style={{\r\n                    color: 'white',\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Todo List App\r\n            </h1>\r\n        </Header>\r\n        <Content\r\n            style={{\r\n                padding: '3rem 2rem',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    maxWidth: 608,\r\n                    margin: '0 auto',\r\n                    backgroundColor: 'white',\r\n                }}\r\n            >\r\n                {children}\r\n            </div>\r\n        </Content>\r\n        <Footer\r\n            style={{\r\n                textAlign: 'center'\r\n            }}\r\n        >\r\n            Made with ‚ù§ by Thomas Chappel\r\n        </Footer>\r\n    </Layout>\r\n);\r\n\r\nexport default AppLayout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Row = styled.div`\r\n    width: 100%;\r\n    height: 100%\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: start;\r\n    align-items: center;\r\n`;\r\n\r\nexport const TodoSelectionIconWrapper = styled.span`\r\n    margin-right: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const TodoTitleWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-right: auto;\r\n`;\r\n\r\nexport const ErrorMessage = styled.span`\r\n    color: red;\r\n    margin-left: 1rem;\r\n`;\r\n\r\nexport const TodoIconWrapper = styled.span`\r\n    margin-left: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle as faCircleRegular } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCircle as faCircleSolid } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst typesMap = {\r\n    'circle-filled': faCircleSolid,\r\n    'circle-outlined': faCircleRegular,\r\n    'edit': faPencilAlt,\r\n    'delete': faTrashAlt,\r\n};\r\n\r\nconst Icon = ({type, ...rest}) => {\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={typesMap[type]}\r\n            {...rest}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState, forwardRef } from 'react';\r\n\r\nconst EditTextValue = forwardRef(({\r\n                                      originalValue = '',\r\n                                      placeholder = '',\r\n                                      onBlur,\r\n                                      onSubmit,\r\n                                      onChange,\r\n                                  }, ref) => {\r\n\r\n    const [value, setValue] = useState(originalValue);\r\n\r\n    return (\r\n        <form\r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                onSubmit(value);\r\n            }}\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                name=\"edit-text\"\r\n                placeholder={placeholder}\r\n                ref={ref}\r\n                value={value}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange();\r\n                }}\r\n                onBlur={onBlur}\r\n            />\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default EditTextValue;\r\n","import React, { forwardRef } from 'react';\r\nimport { Row, TodoTitleWrapper, TodoSelectionIconWrapper, TodoIconWrapper, ErrorMessage } from './styled';\r\nimport Icon from '../Icon';\r\nimport EditTextValue from '../EditTextValue';\r\n\r\nconst TodoListItem = forwardRef(({\r\n                                     todo,\r\n                                     onBtnSelectionClick,\r\n                                     onBtnEditClick,\r\n                                     onBtnDeleteClick,\r\n                                     onInputTextBlur,\r\n                                     onInputTextOnChange,\r\n                                     onInputTextSubmit,\r\n                                 }, ref) => {\r\n    const {\r\n        title,\r\n        selected,\r\n        id,\r\n        editing,\r\n        errorMessage,\r\n    } = todo;\r\n\r\n    return (\r\n        <Row>\r\n            <TodoSelectionIconWrapper>\r\n                <Icon\r\n                    type={selected ? \"circle-filled\" : \"circle-outlined\"}\r\n                    onClick={() => onBtnSelectionClick(id)}\r\n                />\r\n            </TodoSelectionIconWrapper>\r\n            <TodoTitleWrapper>\r\n                {\r\n                    editing\r\n                        ? (\r\n                            <EditTextValue\r\n                                originalValue={title}\r\n                                placeholder=\"Enter new todo title\"\r\n                                onBlur={() => onInputTextBlur(todo)}\r\n                                onSubmit={onInputTextSubmit(id)}\r\n                                ref={ref}\r\n                                onChange={() => onInputTextOnChange(id)}\r\n                            />\r\n                        )\r\n                        : title\r\n                }\r\n                {\r\n                    errorMessage && (\r\n                        <ErrorMessage>\r\n                            {errorMessage}\r\n                        </ErrorMessage>\r\n                    )\r\n                }\r\n            </TodoTitleWrapper>\r\n            {\r\n                editing\r\n                    ? null\r\n                    : (\r\n                        <>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"edit\"\r\n                                    onClick={() => onBtnEditClick(id)}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"delete\"\r\n                                    onClick={onBtnDeleteClick(id)}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                        </>\r\n                    )\r\n            }\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default TodoListItem;\r\n","import styled from 'styled-components';\r\nimport { List } from 'antd';\r\n\r\nexport const ListItem = styled(List.Item)`\r\n    &:hover {\r\n        background-color: #F7F9F9\r\n    }\r\n`;\r\n","import React, { forwardRef } from 'react';\r\nimport { List } from 'antd';\r\nimport TodoListItem from '../TodoListItem';\r\nimport { ListItem } from './styled';\r\n\r\nconst TodoList = forwardRef(({todos = [], ...rest}, ref) => {\r\n    return (\r\n        <div>\r\n            <List\r\n                bordered\r\n                dataSource={todos}\r\n                renderItem={todo => (\r\n                    <ListItem>\r\n                        <TodoListItem\r\n                            todo={todo}\r\n                            ref={ref}\r\n                            {...rest}\r\n                        />\r\n                    </ListItem>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodoList;\r\n","import { Modal } from 'antd';\r\n\r\nconst {confirm} = Modal;\r\n\r\n/*\r\nThis Modal component comes from antd library\r\nThe API requires to pass a function to the onClick attribute of a button\r\nhttps://ant.design/components/modal/#header\r\nSince this comes from a reusable library, and because of the way it was designed, as a function rather than a component,\r\nI will not use reusable logic here,\r\nI just prepare the function to be put into the todo delete button onClick attribute\r\n*/\r\n\r\nconst showDeleteConfirm = deleteTodoFunc => todoId => () => {\r\n    confirm({\r\n        title: 'Are you sure you want to delete this todo?',\r\n        content: 'Press yes to confirm deletion',\r\n        okText: 'Yes',\r\n        okType: 'danger',\r\n        cancelText: 'No',\r\n        onOk() {\r\n            deleteTodoFunc(todoId);\r\n        },\r\n    });\r\n};\r\n\r\nexport default showDeleteConfirm\r\n","import { path } from 'ramda';\r\nimport nextId from 'react-id-generator';\r\n\r\nconst initialState = [\r\n    {\r\n        id: nextId('todo'),\r\n        title: 'first todo',\r\n        selected: true,\r\n        editing: false,\r\n        errorMessage: '',\r\n    },\r\n];\r\n\r\nconst createNewTodo = () => ({\r\n    id: nextId('todo'),\r\n    title: '',\r\n    selected: false,\r\n    editing: true,\r\n    errorMessage: '',\r\n});\r\n\r\n// action types\r\nconst ADD_NEW_TODO = 'ADD_NEW_TODO';\r\nconst DELETE_TODO = 'DELETE_TODO';\r\nconst TOGGLE_TODO_KEYS = 'TOGGLE_TODO_KEYS';\r\nconst SET_TODO_KEYS = 'SET_TODO_KEYS';\r\n\r\n/** ACTION CREATORS **/\r\nexport const addNewTodo = () => ({\r\n    type: ADD_NEW_TODO\r\n});\r\n\r\nexport const deleteTodo = todoId => ({\r\n    type: DELETE_TODO,\r\n    payload: todoId\r\n});\r\n\r\n// keys is an array of keys to toggle\r\nexport const toggleTodoKeys = (todoId, keys = []) => ({\r\n    type: TOGGLE_TODO_KEYS,\r\n    payload: {\r\n        keys,\r\n        todoId\r\n    }\r\n});\r\n\r\nexport const toggleTodoSelected = todoId => toggleTodoKeys(todoId, ['selected']);\r\nexport const toggleTodoEditing = todoId => toggleTodoKeys(todoId, ['editing']);\r\n\r\n// entries is an object that contains keys and values\r\nexport const setTodoKeys = (todoId, entries = {}) => ({\r\n    type: SET_TODO_KEYS,\r\n    payload: {\r\n        entries,\r\n        todoId\r\n    }\r\n});\r\n\r\n// error can be a string or nil\r\nexport const setTodoTitle = (todoId, title) => setTodoKeys(todoId, {title});\r\nexport const setTodoErrorMessage = (todoId, errorMessage) => setTodoKeys(todoId, {errorMessage});\r\n\r\n/** SELECTORS **/\r\nexport const selectTodos = path(['todos']);\r\n\r\n/** REDUCER **/\r\nexport default (state = initialState, action) => {\r\n    if (action.type === ADD_NEW_TODO) {\r\n        const newTodo = createNewTodo();\r\n        return [\r\n            ...state,\r\n            {...newTodo}\r\n        ];\r\n    }\r\n\r\n    if (action.type === DELETE_TODO) {\r\n        return state.filter(todo => todo.id !== action.payload);\r\n    }\r\n\r\n    if (action.type === TOGGLE_TODO_KEYS) {\r\n        const {keys = [], todoId} = action.payload;\r\n        return state.map(todo => {\r\n            if (todo.id === todoId) {\r\n                const toggledKeysObj = keys.reduce((acc, curr) => {\r\n                    acc[curr] = !todo[curr];\r\n                    return acc;\r\n                }, {});\r\n                return {...todo, ...toggledKeysObj};\r\n            } else {\r\n                return todo;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (action.type === SET_TODO_KEYS) {\r\n        const {entries = {}, todoId} = action.payload;\r\n        return state.map(todo => todo.id === todoId\r\n            ? {...todo, ...entries}\r\n            : todo\r\n        );\r\n    }\r\n\r\n    return state;\r\n};\r\n","// This files contains reusable propTypes\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const todoPropType = PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string,\r\n    selected: PropTypes.bool.isRequired,\r\n    editing: PropTypes.bool.isRequired,\r\n    errorMessage: PropTypes.string,\r\n});\r\n\r\nexport const todosPropType = PropTypes.arrayOf(todoPropType);\r\n","// this file containes reusable default values of components props\r\n\r\nexport const defaultProps = {\r\n    todos: []\r\n};\r\n","import React, { useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Layout from '../Layout';\r\nimport TodoList from '../TodoList';\r\nimport { Button, Icon } from 'antd';\r\nimport showDeleteConfirm from '../ShowDeleteConfirm';\r\nimport {\r\n    selectTodos,\r\n    toggleTodoSelected,\r\n    toggleTodoEditing,\r\n    addNewTodo,\r\n    deleteTodo,\r\n    setTodoTitle,\r\n    setTodoErrorMessage,\r\n} from '../../redux/ducks/todos';\r\nimport { todosPropType } from '../../shapes';\r\nimport { defaultProps } from '../../defaultProps';\r\n\r\nconst App = ({\r\n                 todos = defaultProps.todos,\r\n                 toggleTodoSelected,\r\n                 toggleTodoEditing,\r\n                 addNewTodo,\r\n                 deleteTodo,\r\n                 setTodoTitle,\r\n                 setTodoErrorMessage\r\n\r\n             }) => {\r\n\r\n        const textInputRef = useRef(null);\r\n\r\n        const todoBeingEdited = todos.find(todo => todo.editing === true); // todo-object or undefined\r\n\r\n        const findTodoWithSameTitle = str => {\r\n            return todos.find(todo => todo.title.toLowerCase() === str.toLowerCase()); // todo-object or undefined\r\n        };\r\n\r\n        const onInputTextBlur = todo => {\r\n            if (todo.title) {\r\n                setTodoErrorMessage(todo.id, '');\r\n                toggleTodoEditing(todo.id);\r\n            } else {\r\n                setTodoErrorMessage(todo.id, 'Please enter new todo title');\r\n                textInputRef.current.focus();\r\n            }\r\n        };\r\n\r\n        const onBtnEditClick = todoId => {\r\n            if (!todoBeingEdited) {\r\n                toggleTodoEditing(todoId);\r\n            }\r\n        };\r\n\r\n        const onInputTextOnChange = todoId => {\r\n            setTodoErrorMessage(todoId, '');\r\n        };\r\n\r\n        const onInputTextSubmit = todoId => (submittedValue = '') => {\r\n\r\n            if (submittedValue.length === 0) {\r\n                setTodoErrorMessage(todoId, 'Cannot submit an empty value!');\r\n            } else {\r\n                const todoWithSameTitle = findTodoWithSameTitle(submittedValue);\r\n                if (todoWithSameTitle && todoWithSameTitle.id !== todoId) {\r\n                    setTodoErrorMessage(todoId, 'This Todo already exists!');\r\n                } else {\r\n                    setTodoTitle(todoId, submittedValue);\r\n                    setTodoErrorMessage(todoId, '');\r\n                    toggleTodoEditing(todoId);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n\r\n        const onBtnNewItemClick = () => {\r\n            if (!todoBeingEdited) {\r\n                addNewTodo();\r\n            }\r\n        };\r\n\r\n        useEffect(() => {\r\n            if (textInputRef && textInputRef.current) {\r\n                textInputRef.current.focus();\r\n            }\r\n        }, [todos]);\r\n\r\n        return (\r\n            <Layout>\r\n                <TodoList\r\n                    todos={todos}\r\n                    ref={textInputRef}\r\n                    onBtnSelectionClick={toggleTodoSelected}\r\n                    onBtnEditClick={onBtnEditClick}\r\n                    onBtnDeleteClick={showDeleteConfirm(deleteTodo)}\r\n                    onInputTextBlur={onInputTextBlur}\r\n                    onInputTextOnChange={onInputTextOnChange}\r\n                    onInputTextSubmit={onInputTextSubmit}\r\n                />\r\n                <Button\r\n                    style={{\r\n                        float: 'right',\r\n                        marginTop: '1rem',\r\n                    }}\r\n                    type=\"primary\"\r\n                    size=\"large\"\r\n                    onClick={onBtnNewItemClick}\r\n                >\r\n                    New Item\r\n                    <Icon type=\"plus\" />\r\n                </Button>\r\n            </Layout>\r\n        );\r\n    }\r\n;\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: selectTodos(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    toggleTodoSelected,\r\n    toggleTodoEditing,\r\n    addNewTodo,\r\n    deleteTodo,\r\n    setTodoTitle,\r\n    setTodoErrorMessage,\r\n};\r\n\r\nApp.propTypes = {\r\n    todos: todosPropType,\r\n    toggleTodoSelected: PropTypes.func,\r\n    toggleTodoEditing: PropTypes.func,\r\n    addNewTodo: PropTypes.func,\r\n    deleteTodo: PropTypes.func,\r\n    setTodoTitle: PropTypes.func,\r\n    setTodoErrorMessage: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\nimport todosReducer from './ducks/todos';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootEpic = combineEpics(\r\n    // Epics go here\r\n);\r\n\r\nconst rootReducer = combineReducers({\r\n    // State properties reducers go here,\r\n    todos: todosReducer,\r\n});\r\n\r\nexport default function configureStore() {\r\n    const store = createStore(rootReducer, composeWithDevTools(\r\n        applyMiddleware(epicMiddleware),\r\n        // other store enhancers if any\r\n    ));\r\n\r\n    epicMiddleware.run(rootEpic);\r\n\r\n    return store;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './components';\r\nimport 'antd/dist/antd.css';\r\nimport configureStore from './redux/configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}