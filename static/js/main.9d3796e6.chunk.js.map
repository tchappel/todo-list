{"version":3,"sources":["components/Layout/index.js","components/TodoListItem/styled.js","components/Icon/Icon.js","components/EditTextValue/EditTextValue.js","components/TodoListItem/TodoListItem.js","components/ShowDeleteConfirm/index.js","defaultProps/index.js","redux/ducks/todos.js","components/TodoList/styled.js","shapes/index.js","components/TodoList/TodoList.js","components/TodoListContainer/TodoListContainer.js","utilities/index.js","components/App/App.js","localStorage.js","redux/configureStore.js","index.js"],"names":["Header","Layout","Footer","Content","AppLayout","children","style","minHeight","color","textAlign","padding","maxWidth","margin","backgroundColor","Row","styled","div","TodoSelectionIconWrapper","span","TodoTitleWrapper","TodoIconWrapper","typesMap","faCircleSolid","faCircleRegular","faPencilAlt","faTrashAlt","Icon","type","rest","icon","TextInput","input","meta","textInputRef","useRef","console","log","useEffect","current","focus","Item","validateStatus","touched","error","help","prefix","ref","onBlur","event","relatedTarget","getAttribute","preventDefault","reduxForm","form","handleSubmit","noop","placeholder","onBtnCancelClick","layout","onSubmit","Field","component","name","htmlType","id","onClick","TodoListItem","title","selected","editing","onBtnSelectClick","onBtnEditClick","onBtnDeleteClick","visibility","initialValues","confirm","Modal","showDeleteConfirm","content","onConfirmDelete","okText","okType","cancelText","onOk","defaultProps","todos","initialState","createNewTodo","v4","errorMessage","toggleTodoKeys","todoId","keys","payload","setTodoKeys","entries","selectTodos","path","ListItem","List","todoPropType","PropTypes","shape","string","isRequired","bool","customizeRenderEmpty","arrayOf","description","TodoList","dataSource","renderItem","renderEmpty","bordered","item","mapDispatchToProps","toggleTodoSelected","toggleTodoEditing","addNewTodo","deleteTodo","setTodoTitle","connect","state","arr","key","value","isEditingTodo","find","propEq","findTodoWithSameTitle","str","todo","toLowerCase","values","validate","errors","todoWithSameTitle","float","marginTop","size","App","loadStateFromLocalStorage","serializedState","localStorage","getItem","JSON","parse","err","saveStateToLocalStorage","stringify","setItem","epicMiddleware","createEpicMiddleware","rootEpic","combineEpics","rootReducer","combineReducers","formReducer","action","newTodo","filter","map","toggledKeysObj","reduce","acc","curr","store","persistedState","createStore","composeWithDevTools","applyMiddleware","run","subscribe","throttle","getState","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d3796e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst {Header, Footer, Content} = Layout;\r\n\r\nconst AppLayout = ({children}) => (\r\n    <Layout\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Header>\r\n            <h1\r\n                style={{\r\n                    color: 'white',\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Todo List App\r\n            </h1>\r\n        </Header>\r\n        <Content\r\n            style={{\r\n                padding: '3rem 2rem',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    maxWidth: 608,\r\n                    margin: '0 auto',\r\n                    backgroundColor: 'white',\r\n                }}\r\n            >\r\n                {children}\r\n            </div>\r\n        </Content>\r\n        <Footer\r\n            style={{\r\n                textAlign: 'center'\r\n            }}\r\n        >\r\n            Made with ‚ù§ by Thomas Chappel\r\n        </Footer>\r\n    </Layout>\r\n);\r\n\r\nexport default AppLayout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Row = styled.div`\r\n    width: 100%;\r\n    height: 100%\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: start;\r\n    align-items: center;\r\n`;\r\n\r\nexport const TodoSelectionIconWrapper = styled.span`\r\n    margin-right: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const TodoTitleWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-right: auto;\r\n`;\r\n\r\nexport const TodoIconWrapper = styled.span`\r\n    margin-left: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle as faCircleRegular } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCircle as faCircleSolid } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst typesMap = {\r\n    'circle-filled': faCircleSolid,\r\n    'circle-outlined': faCircleRegular,\r\n    'edit': faPencilAlt,\r\n    'delete': faTrashAlt,\r\n};\r\n\r\nconst Icon = ({type, ...rest}) => {\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={typesMap[type]}\r\n            {...rest}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { Form, Input, Button, Icon } from 'antd';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { noop } from 'ramda-extension';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextInput = ({input, meta, ...rest}) => {\r\n\r\n    const textInputRef = useRef(null);\r\n    console.log(meta);\r\n\r\n    useEffect(() => {\r\n        if (textInputRef) {\r\n            textInputRef.current.focus();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Form.Item\r\n            validateStatus={meta.touched && meta.error ? 'error' : ''}\r\n            help={meta.touched && meta.error ? meta.error : ''}\r\n        >\r\n            <Input\r\n                prefix={<Icon type=\"edit\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                ref={textInputRef}\r\n                {...input}\r\n                // I need this hack to not fire blur event when clicking cancel btn\r\n                // this hack has to override the onBlur handler prop passed from redux-form\r\n                onBlur={event => {\r\n                    const {relatedTarget} = event;\r\n                    if (relatedTarget && ('btn-cancel-form' === relatedTarget.getAttribute('id'))) {\r\n                        event.preventDefault();\r\n                    } else {\r\n                        input.onBlur(event);\r\n                        textInputRef.current.focus();\r\n                    }\r\n                }}\r\n                {...rest}\r\n                type=\"text\"\r\n            />\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nconst EditTextValue = ({\r\n                           handleSubmit = noop,\r\n                           placeholder = '',\r\n                           onBtnCancelClick = noop\r\n                       }) => {\r\n    return (\r\n        <Form\r\n            layout=\"inline\"\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <Field\r\n                component={TextInput}\r\n                name=\"title\"\r\n                placeholder={placeholder}\r\n            />\r\n            <Form.Item>\r\n                <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                >\r\n                    OK\r\n                </Button>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button\r\n                    // this id is needed to not fire blur event when clicking cancel btn\r\n                    id=\"btn-cancel-form\"\r\n                    onClick={onBtnCancelClick}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nEditTextValue.propTypes = {\r\n    placeholder: PropTypes.string,\r\n    handleSubmit: PropTypes.func,\r\n    onBtnCancelClick: PropTypes.func,\r\n};\r\n\r\nexport default reduxForm({\r\n    // a unique name for the form\r\n    form: 'todo-title',\r\n})(EditTextValue);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, TodoTitleWrapper, TodoSelectionIconWrapper, TodoIconWrapper } from './styled';\r\nimport Icon from '../Icon';\r\nimport EditTextValue from '../EditTextValue';\r\nimport { noop } from 'ramda-extension';\r\n\r\nconst TodoListItem = ({\r\n                          title = '',\r\n                          selected = false,\r\n                          editing = false,\r\n                          onBtnSelectClick = noop,\r\n                          onBtnEditClick = noop,\r\n                          onBtnDeleteClick = noop,\r\n                          ...rest\r\n                      }) => {\r\n    return (\r\n        <Row>\r\n            <TodoSelectionIconWrapper>\r\n                <Icon\r\n                    type={selected ? \"circle-filled\" : \"circle-outlined\"}\r\n                    onClick={onBtnSelectClick}\r\n                    style={{\r\n                        visibility: editing ? 'hidden' : 'visible',\r\n                    }}\r\n                />\r\n            </TodoSelectionIconWrapper>\r\n            <TodoTitleWrapper>\r\n                {\r\n                    editing\r\n                        ? (\r\n                            <>\r\n                                <EditTextValue\r\n                                    initialValues={{\r\n                                        title\r\n                                    }}\r\n                                    {...rest}\r\n                                />\r\n                            </>\r\n                        )\r\n                        : title\r\n                }\r\n            </TodoTitleWrapper>\r\n            {\r\n                editing\r\n                    ? null\r\n                    : (\r\n                        <>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"edit\"\r\n                                    onClick={onBtnEditClick}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"delete\"\r\n                                    onClick={onBtnDeleteClick}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                        </>\r\n                    )\r\n            }\r\n        </Row>\r\n    );\r\n};\r\n\r\nTodoListItem.propTypes = {\r\n    title: PropTypes.string,\r\n    selected: PropTypes.bool,\r\n    editing: PropTypes.bool,\r\n    onBtnSelectClick: PropTypes.func,\r\n    onBtnEditClick: PropTypes.func,\r\n    onBtnDeleteClick: PropTypes.func,\r\n};\r\n\r\nexport default TodoListItem;\r\n","import { Modal } from 'antd';\r\nimport { noop } from 'ramda-extension';\r\n\r\nconst {confirm} = Modal;\r\n\r\n/*\r\nThis Modal component comes from antd library\r\nThe API requires to pass this function to the onClick attribute of a button\r\nI modified it a bit to make it reusable\r\nhttps://ant.design/components/modal/#header\r\n*/\r\n\r\nconst showDeleteConfirm = ({\r\n                               title = '',\r\n                               content = '',\r\n                               onConfirmDelete = noop\r\n                           }) => {\r\n    confirm({\r\n        title: title,\r\n        content: content,\r\n        okText: 'Yes',\r\n        okType: 'danger',\r\n        cancelText: 'No',\r\n        onOk() {\r\n            onConfirmDelete();\r\n        }\r\n    });\r\n};\r\n\r\nexport default showDeleteConfirm;\r\n","// this file containes reusable default values of components props\r\n\r\nexport const defaultProps = {\r\n    todos: []\r\n};\r\n","import { path } from 'ramda';\r\nimport { v4 } from 'node-uuid';\r\nimport { defaultProps } from '../../defaultProps';\r\n\r\nconst initialState = defaultProps.todos;\r\n\r\nconst createNewTodo = () => ({\r\n    id: v4(),\r\n    title: '',\r\n    selected: false,\r\n    editing: true,\r\n    errorMessage: '',\r\n});\r\n\r\n// action types\r\nconst ADD_NEW_TODO = 'ADD_NEW_TODO';\r\nconst DELETE_TODO = 'DELETE_TODO';\r\nconst TOGGLE_TODO_KEYS = 'TOGGLE_TODO_KEYS';\r\nconst SET_TODO_KEYS = 'SET_TODO_KEYS';\r\n\r\n/** ACTION CREATORS **/\r\nexport const addNewTodo = () => ({\r\n    type: ADD_NEW_TODO\r\n});\r\n\r\nexport const deleteTodo = todoId => ({\r\n    type: DELETE_TODO,\r\n    payload: todoId\r\n});\r\n\r\n// keys is an array of keys to toggle\r\nexport const toggleTodoKeys = (todoId, keys = []) => ({\r\n    type: TOGGLE_TODO_KEYS,\r\n    payload: {\r\n        keys,\r\n        todoId\r\n    }\r\n});\r\n\r\nexport const toggleTodoSelected = todoId => toggleTodoKeys(todoId, ['selected']);\r\nexport const toggleTodoEditing = todoId => toggleTodoKeys(todoId, ['editing']);\r\n\r\n// entries is an object that contains keys and values\r\nexport const setTodoKeys = (todoId, entries = {}) => ({\r\n    type: SET_TODO_KEYS,\r\n    payload: {\r\n        entries,\r\n        todoId\r\n    }\r\n});\r\n\r\n// error can be a string or nil\r\nexport const setTodoTitle = (todoId, title) => setTodoKeys(todoId, {title});\r\nexport const setTodoErrorMessage = (todoId, errorMessage) => setTodoKeys(todoId, {errorMessage});\r\n\r\n/** SELECTORS **/\r\nexport const selectTodos = path(['todos']);\r\n\r\n/** REDUCER **/\r\nexport default (state = initialState, action) => {\r\n    if (action.type === ADD_NEW_TODO) {\r\n        const newTodo = createNewTodo();\r\n        return [\r\n            ...state,\r\n            {...newTodo}\r\n        ];\r\n    }\r\n\r\n    if (action.type === DELETE_TODO) {\r\n        return state.filter(todo => todo.id !== action.payload);\r\n    }\r\n\r\n    if (action.type === TOGGLE_TODO_KEYS) {\r\n        const {keys = [], todoId} = action.payload;\r\n        return state.map(todo => {\r\n            if (todo.id === todoId) {\r\n                const toggledKeysObj = keys.reduce((acc, curr) => {\r\n                    acc[curr] = !todo[curr];\r\n                    return acc;\r\n                }, {});\r\n                return {...todo, ...toggledKeysObj};\r\n            } else {\r\n                return todo;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (action.type === SET_TODO_KEYS) {\r\n        const {entries = {}, todoId} = action.payload;\r\n        return state.map(todo => todo.id === todoId\r\n            ? {...todo, ...entries}\r\n            : todo\r\n        );\r\n    }\r\n\r\n    return state;\r\n};\r\n","import styled from 'styled-components';\r\nimport { List } from 'antd';\r\n\r\nexport const ListItem = styled(List.Item)`\r\n    &:hover {\r\n        background-color: #F7F9F9\r\n    }\r\n`;\r\n","// This files contains reusable propTypes\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const todoPropType = PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string,\r\n    selected: PropTypes.bool.isRequired,\r\n    editing: PropTypes.bool.isRequired,\r\n});\r\n\r\nexport const todosPropType = PropTypes.arrayOf(todoPropType);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ConfigProvider, Empty, List } from 'antd';\r\nimport { ListItem } from './styled';\r\nimport { todosPropType } from '../../shapes';\r\nimport { defaultProps } from '../../defaultProps';\r\nimport { noop } from 'ramda-extension';\r\n\r\n/**API**/\r\n// This component is just ANTD List with some configured styled for use as TodoList\r\n// I tried to keep same API as regards dataSource and render prop\r\n// https://ant.design/components/list/\r\n\r\nconst customizeRenderEmpty = () => (\r\n    <Empty\r\n        description={\r\n            <span>\r\n                There are currently no todos. <br />\r\n                Click button \"New Item\" to add new todos.\r\n            </span>\r\n        }\r\n    />\r\n);\r\n\r\n\r\nconst TodoList = ({dataSource = [defaultProps.todos], renderItem = noop}) => {\r\n    return (\r\n        <ConfigProvider\r\n            renderEmpty={customizeRenderEmpty}\r\n        >\r\n            <List\r\n                bordered\r\n                dataSource={dataSource}\r\n                renderItem={(item) => (\r\n                    <ListItem>\r\n                        {renderItem(item)}\r\n                    </ListItem>\r\n                )}\r\n            />\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nTodoList.propTypes = {\r\n    dataSource: todosPropType,\r\n    renderItem: PropTypes.func\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Icon } from 'antd';\r\nimport TodoListItem from '../TodoListItem';\r\nimport { findItemWithKeyValue } from '../../utilities';\r\nimport showDeleteConfirm from '../ShowDeleteConfirm';\r\nimport {\r\n    addNewTodo,\r\n    deleteTodo,\r\n    selectTodos,\r\n    setTodoTitle,\r\n    toggleTodoEditing,\r\n    toggleTodoSelected\r\n} from '../../redux/ducks/todos';\r\nimport TodoList from '../TodoList';\r\n\r\nconst TodoListContainer = ({\r\n                               todos,\r\n                               addNewTodo,\r\n                               toggleTodoSelected,\r\n                               toggleTodoEditing,\r\n                               deleteTodo,\r\n                               setTodoTitle,\r\n                           }) => {\r\n\r\n    const isEditingTodo = !!findItemWithKeyValue(todos, 'editing', true);\r\n    const findTodoWithSameTitle = (str = '') => {\r\n        return todos.find(todo => todo.title.toLowerCase() === str.toLowerCase());\r\n    };\r\n\r\n    const onBtnNewItemClick = () => {\r\n        if (!isEditingTodo) {\r\n            addNewTodo();\r\n        }\r\n    };\r\n\r\n    const onBtnEditClick = (todoId = '') => {\r\n        if (!isEditingTodo) {\r\n            toggleTodoEditing(todoId);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (todoId = '') => (values = {}) => {\r\n        const {title = ''} = values;\r\n        setTodoTitle(todoId, title);\r\n        toggleTodoEditing(todoId);\r\n    };\r\n\r\n\r\n    const validate = (todoId = '') => (values = {}) => {\r\n        const errors = {};\r\n        const {title = ''} = values;\r\n        const todoWithSameTitle = findTodoWithSameTitle(title);\r\n        if (!title) {\r\n            errors.title = 'Please enter todo title!';\r\n        }\r\n        if (!!todoWithSameTitle && todoWithSameTitle.id !== todoId) {\r\n            errors.title = 'This Todo already exists!';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TodoList\r\n                dataSource={todos}\r\n                renderItem={todo => (\r\n                    <TodoListItem\r\n                        title={todo.title}\r\n                        selected={todo.selected}\r\n                        editing={todo.editing}\r\n                        onBtnSelectClick={() => toggleTodoSelected(todo.id)}\r\n                        onBtnEditClick={() => onBtnEditClick(todo.id)}\r\n                        onBtnDeleteClick={() => showDeleteConfirm({\r\n                            title: 'Are you sure to delete this todo?',\r\n                            content: 'Click Yes to continue',\r\n                            onConfirmDelete: () => deleteTodo(todo.id)\r\n                        })}\r\n                        onSubmit={onSubmit(todo.id)}\r\n                        validate={validate(todo.id)}\r\n                        placeholder=\"Enter new todo title\"\r\n                        onBtnCancelClick={\r\n                            todo.title\r\n                                ? () => toggleTodoEditing(todo.id)\r\n                                : () => deleteTodo(todo.id)\r\n                        }\r\n                    />\r\n                )}\r\n            />\r\n            <Button\r\n                style={{\r\n                    float: 'right',\r\n                    marginTop: '1rem',\r\n                }}\r\n                type=\"primary\"\r\n                size=\"large\"\r\n                onClick={onBtnNewItemClick}\r\n            >\r\n                New Item\r\n                <Icon type=\"plus\" />\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: selectTodos(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    toggleTodoSelected,\r\n    toggleTodoEditing,\r\n    addNewTodo,\r\n    deleteTodo,\r\n    setTodoTitle,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListContainer);\r\n","import { find, propEq } from 'ramda';\r\n\r\nexport const findItemWithKeyValue = (arr, key, value) => find(propEq(key, value))(arr); // returns object or undefined\r\n","import React from 'react';\r\nimport Layout from '../Layout';\r\nimport TodoListContainer from '../TodoListContainer';\r\n\r\nconst App = () => (\r\n    <Layout>\r\n        <TodoListContainer />\r\n    </Layout>\r\n);\r\n\r\nexport default App;\r\n","// credit to Dan Abramov\r\n// https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\r\n\r\nexport const loadStateFromLocalStorage = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        console.log(err);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveStateToLocalStorage = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\nimport todosReducer from './ducks/todos';\r\nimport throttle from 'lodash.throttle';\r\nimport { loadStateFromLocalStorage, saveStateToLocalStorage } from '../localStorage';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootEpic = combineEpics(\r\n    // Epics go here\r\n);\r\n\r\nconst rootReducer = combineReducers({\r\n    // State properties reducers go here,\r\n    form: formReducer,\r\n    todos: todosReducer,\r\n});\r\n\r\nexport default function configureStore() {\r\n\r\n    const persistedState = loadStateFromLocalStorage();\r\n\r\n    const store = createStore(rootReducer,\r\n        persistedState,\r\n        composeWithDevTools(\r\n            applyMiddleware(epicMiddleware),\r\n            // other store enhancers if any\r\n        )\r\n    );\r\n\r\n    epicMiddleware.run(rootEpic);\r\n\r\n    store.subscribe(throttle(() => {\r\n        saveStateToLocalStorage({\r\n            todos: store.getState().todos\r\n        });\r\n    }, 1000));\r\n\r\n    return store;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './components';\r\nimport 'antd/dist/antd.css';\r\nimport configureStore from './redux/configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}