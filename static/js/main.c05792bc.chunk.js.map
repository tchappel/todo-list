{"version":3,"sources":["components/Layout/index.js","components/TodoListItem/styled.js","components/Icon/Icon.js","components/EditTextValue/EditTextValue.js","components/TodoListItem/TodoListItem.js","components/TodoList/styled.js","components/TodoList/TodoList.js","components/ShowDeleteConfirm/index.js","components/App/App.js","index.js"],"names":["Header","Layout","Footer","Content","AppLayout","children","style","minHeight","color","textAlign","padding","maxWidth","margin","backgroundColor","Row","styled","div","TodoSelectionIconWrapper","span","TodoTitleWrapper","ErrorMessage","TodoIconWrapper","typesMap","faCircleSolid","faCircleRegular","faPencilAlt","faTrashAlt","Icon","type","rest","icon","EditTextValue","forwardRef","ref","originalValue","placeholder","onBlur","onSubmit","onChange","useState","value","setValue","e","preventDefault","name","target","TodoListItem","todo","onBtnSelectionClick","onBtnEditClick","onBtnDeleteClick","onInputTextBlur","onInputTextOnChange","onInputTextSubmit","title","selected","id","editing","error","onClick","message","ListItem","List","Item","TodoList","todos","bordered","dataSource","renderItem","confirm","Modal","showDeleteConfirm","deleteTodoFunc","todoId","content","okText","okType","cancelText","onOk","initialTodos","nextId","App","setTodos","textInputRef","useRef","addNewTodo","newTodo","setTodoError","newTodos","map","todoBeingEdited","find","findTodoWithSameTitle","str","toLowerCase","useEffect","current","focus","toggleTodoEditing","filter","item","submittedValue","length","todoWithSameTitle","float","marginTop","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c05792bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst {Header, Footer, Content} = Layout;\r\n\r\nconst AppLayout = ({children}) => (\r\n    <Layout\r\n        style={{minHeight: '100vh'}}\r\n    >\r\n        <Header>\r\n            <h1\r\n                style={{\r\n                    color: 'white',\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Todo List App\r\n            </h1>\r\n        </Header>\r\n        <Content\r\n            style={{\r\n                padding: '3rem 2rem',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    maxWidth: 608,\r\n                    margin: '0 auto',\r\n                    backgroundColor: 'white',\r\n                }}\r\n            >\r\n                {children}\r\n            </div>\r\n        </Content>\r\n        <Footer\r\n            style={{\r\n                textAlign: 'center'\r\n            }}\r\n        >\r\n            Made with ‚ù§ by Thomas Chappel\r\n        </Footer>\r\n    </Layout>\r\n);\r\n\r\nexport default AppLayout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Row = styled.div`\r\n    width: 100%;\r\n    height: 100%\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: start;\r\n    align-items: center;\r\n`;\r\n\r\nexport const TodoSelectionIconWrapper = styled.span`\r\n    margin-right: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const TodoTitleWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-right: auto;\r\n`;\r\n\r\nexport const ErrorMessage = styled.span`\r\n    color: red;\r\n    margin-left: 1rem;\r\n`;\r\n\r\nexport const TodoIconWrapper = styled.span`\r\n    margin-left: 1rem;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle as faCircleRegular } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCircle as faCircleSolid } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst typesMap = {\r\n    'circle-filled': faCircleSolid,\r\n    'circle-outlined': faCircleRegular,\r\n    'edit': faPencilAlt,\r\n    'delete': faTrashAlt,\r\n};\r\n\r\nconst Icon = ({type, ...rest}) => {\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={typesMap[type]}\r\n            {...rest}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState, forwardRef } from 'react';\r\n\r\nconst EditTextValue = forwardRef(({\r\n                                      originalValue = '',\r\n                                      placeholder = '',\r\n                                      onBlur,\r\n                                      onSubmit,\r\n                                      onChange,\r\n                                  }, ref) => {\r\n\r\n    const [value, setValue] = useState(originalValue);\r\n\r\n    return (\r\n        <form\r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                onSubmit(value);\r\n            }}\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                name=\"edit-text\"\r\n                placeholder={placeholder}\r\n                ref={ref}\r\n                value={value}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange();\r\n                }}\r\n                onBlur={(e) => onBlur()}\r\n            />\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default EditTextValue;\r\n","import React, { forwardRef } from 'react';\r\nimport { Row, TodoTitleWrapper, TodoSelectionIconWrapper, TodoIconWrapper, ErrorMessage } from './styled';\r\nimport Icon from '../Icon';\r\nimport EditTextValue from '../EditTextValue';\r\n\r\nconst TodoListItem = forwardRef(({\r\n                                     todo,\r\n                                     onBtnSelectionClick,\r\n                                     onBtnEditClick,\r\n                                     onBtnDeleteClick,\r\n                                     onInputTextBlur,\r\n                                     onInputTextOnChange,\r\n                                     onInputTextSubmit,\r\n                                 }, ref) => {\r\n    const {\r\n        title,\r\n        selected,\r\n        id,\r\n        editing,\r\n        error,\r\n    } = todo;\r\n\r\n    return (\r\n        <Row>\r\n            <TodoSelectionIconWrapper>\r\n                <Icon\r\n                    type={selected ? \"circle-filled\" : \"circle-outlined\"}\r\n                    onClick={() => onBtnSelectionClick(id)}\r\n                />\r\n            </TodoSelectionIconWrapper>\r\n            <TodoTitleWrapper>\r\n                {\r\n                    editing\r\n                        ? (\r\n                            <EditTextValue\r\n                                originalValue={title}\r\n                                placeholder=\"Enter new todo title\"\r\n                                onBlur={() => onInputTextBlur(todo)}\r\n                                onSubmit={onInputTextSubmit(id)}\r\n                                ref={ref}\r\n                                onChange={() => onInputTextOnChange(id)}\r\n                            />\r\n                        )\r\n                        : title\r\n                }\r\n                {\r\n                    error && (\r\n                        <ErrorMessage>\r\n                            {error.message}\r\n                        </ErrorMessage>\r\n                    )\r\n                }\r\n            </TodoTitleWrapper>\r\n            {\r\n                editing\r\n                    ? null\r\n                    : (\r\n                        <>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"edit\"\r\n                                    onClick={() => onBtnEditClick(id)}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                            <TodoIconWrapper>\r\n                                <Icon\r\n                                    type=\"delete\"\r\n                                    onClick={onBtnDeleteClick(id)}\r\n                                />\r\n                            </TodoIconWrapper>\r\n                        </>\r\n                    )\r\n            }\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default TodoListItem;\r\n","import styled from 'styled-components';\r\nimport { List } from 'antd';\r\n\r\nexport const ListItem = styled(List.Item)`\r\n    &:hover {\r\n        background-color: #F7F9F9\r\n    }\r\n`;\r\n","import React, { forwardRef } from 'react';\r\nimport { List } from 'antd';\r\nimport TodoListItem from '../TodoListItem';\r\nimport { ListItem } from './styled';\r\n\r\nconst TodoList = forwardRef(({todos = [], ...rest}, ref) => {\r\n    return (\r\n        <div>\r\n            <List\r\n                bordered\r\n                dataSource={todos}\r\n                renderItem={todo => (\r\n                    <ListItem>\r\n                        <TodoListItem\r\n                            todo={todo}\r\n                            ref={ref}\r\n                            {...rest}\r\n                        />\r\n                    </ListItem>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodoList;\r\n","import { Modal } from 'antd';\r\n\r\nconst {confirm} = Modal;\r\n\r\n/*\r\nThis Modal component comes from antd library\r\nThe API requires to pass a function to the onClick attribute of a button\r\nhttps://ant.design/components/modal/#header\r\nSince this comes from a reusable library, and because of the way it was designed, as a function rather than a component,\r\nI will not use reusable logic here,\r\nI just prepare the function to be put into the todo delete button onClick attribute\r\n*/\r\n\r\nconst showDeleteConfirm = deleteTodoFunc => todoId => () => {\r\n    confirm({\r\n        title: 'Are you sure you want to delete this todo?',\r\n        content: 'Press yes to confirm deletion',\r\n        okText: 'Yes',\r\n        okType: 'danger',\r\n        cancelText: 'No',\r\n        onOk() {\r\n            deleteTodoFunc(todoId);\r\n        },\r\n    });\r\n};\r\n\r\nexport default showDeleteConfirm\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport nextId from \"react-id-generator\";\r\nimport Layout from '../Layout';\r\nimport TodoList from '../TodoList';\r\nimport { Button, Icon } from 'antd';\r\nimport showDeleteConfirm from '../ShowDeleteConfirm';\r\n\r\nconst initialTodos = [\r\n    {\r\n        id: nextId('todo'),\r\n        title: 'first todo',\r\n        selected: true,\r\n        editing: false,\r\n        error: null,\r\n    },\r\n];\r\n\r\nconst createNewTodo = () => ({\r\n    id: nextId('todo'),\r\n    title: '',\r\n    selected: false,\r\n    editing: true,\r\n    error: null,\r\n});\r\n\r\nconst App = () => {\r\n\r\n        const [todos, setTodos] = useState(initialTodos);\r\n\r\n        const textInputRef = useRef(null);\r\n\r\n        const addNewTodo = () => {\r\n            const newTodo = createNewTodo();\r\n            setTodos([...todos, {...newTodo}]);\r\n        };\r\n\r\n        const deleteTodo = todoId => {\r\n            const newTodos = todos.filter(todo => todo.id !== todoId);\r\n            setTodos(newTodos);\r\n        };\r\n\r\n        const toggleTodoSelected = todoId => {\r\n            const newTodos = todos.map(todo => todo.id === todoId ? {...todo, selected: !todo.selected} : todo);\r\n            setTodos(newTodos);\r\n        };\r\n\r\n        const toggleTodoEditing = todoId => {\r\n            const newTodos = todos.map(todo => todo.id === todoId ? {...todo, editing: !todo.editing} : todo);\r\n            setTodos(newTodos);\r\n        };\r\n\r\n        const setTodoError = (todoId, error) => {\r\n            const newTodos = todos.map(todo => (\r\n                todo.id === todoId\r\n                    ? {...todo, error}\r\n                    : todo\r\n            ));\r\n            setTodos(newTodos);\r\n        };\r\n\r\n        const todoBeingEdited = todos.find(todo => todo.editing === true); // todo-object or undefined\r\n\r\n        const findTodoWithSameTitle = str => {\r\n            return todos.find(todo => todo.title.toLowerCase() === str.toLowerCase()); // todo-object or undefined\r\n        };\r\n\r\n        const onInputTextBlur = todo => {\r\n            if (todo.title) {\r\n                const newTodos = todos.map(item => (\r\n                    item.id === todo.id\r\n                        ? {...item, editing: !item.editing, error: null}\r\n                        : item\r\n                ));\r\n                setTodos(newTodos);\r\n            } else {\r\n                textInputRef.current.focus();\r\n                setTodoError(todo.id, {message: 'Please enter new todo title'});\r\n            }\r\n        };\r\n\r\n        const onBtnEditClick = todoId => {\r\n            if (!todoBeingEdited) {\r\n                toggleTodoEditing(todoId);\r\n            }\r\n        };\r\n\r\n        const onInputTextOnChange = todoId => {\r\n            setTodoError(todoId, null);\r\n        };\r\n\r\n        const onInputTextSubmit = todoId => (submittedValue = '') => {\r\n\r\n            if (submittedValue.length === 0) {\r\n                setTodoError(todoId, {message: 'Cannot submit an empty value!'});\r\n            } else {\r\n                const todoWithSameTitle = findTodoWithSameTitle(submittedValue);\r\n                if (todoWithSameTitle && todoWithSameTitle.id !== todoId) {\r\n                    setTodoError(todoId, {message: 'This Todo already exists!'});\r\n                } else {\r\n                    const newTodos = todos.map(todo => (\r\n                        todo.id === todoId\r\n                            ? {...todo, editing: false, title: submittedValue}\r\n                            : todo\r\n                    ));\r\n                    setTodos(newTodos);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n\r\n        const onBtnNewItemClick = () => {\r\n            if (!todoBeingEdited) {\r\n                addNewTodo();\r\n            }\r\n        };\r\n\r\n        useEffect(() => {\r\n            if (textInputRef && textInputRef.current) {\r\n                textInputRef.current.focus();\r\n            }\r\n        }, [todos]);\r\n\r\n        return (\r\n            <Layout>\r\n                <TodoList\r\n                    todos={todos}\r\n                    ref={textInputRef}\r\n                    onBtnSelectionClick={toggleTodoSelected}\r\n                    onBtnEditClick={onBtnEditClick}\r\n                    onBtnDeleteClick={showDeleteConfirm(deleteTodo)}\r\n                    onInputTextBlur={onInputTextBlur}\r\n                    onInputTextOnChange={onInputTextOnChange}\r\n                    onInputTextSubmit={onInputTextSubmit}\r\n                />\r\n                <Button\r\n                    style={{\r\n                        float: 'right',\r\n                        marginTop: '1rem',\r\n                    }}\r\n                    type=\"primary\"\r\n                    size=\"large\"\r\n                    onClick={onBtnNewItemClick}\r\n                >\r\n                    New Item\r\n                    <Icon type=\"plus\" />\r\n                </Button>\r\n            </Layout>\r\n        );\r\n    }\r\n;\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './components';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}